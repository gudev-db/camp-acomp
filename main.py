import streamlit as st
import pandas as pd
import numpy as np
import os
from google.generativeai import GenerativeModel
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

# Configura√ß√£o da p√°gina
st.set_page_config(
    layout="wide",
    page_title="Analytics de Campanhas",
    page_icon="üìä"
)

# T√≠tulo principal
st.title("üìä Analytics Avan√ßado de Campanhas Digitais")

# Verifica se a API key do Gemini est√° configurada
gemini_api_key = os.getenv("GEMINI_API_KEY")
if not gemini_api_key:
    st.warning("‚ö†Ô∏è Chave da API Gemini n√£o encontrada. O relat√≥rio avan√ßado ser√° limitado.")

# Fun√ß√µes do aplicativo ==============================================

def carregar_dados(arquivo):
    """Carrega e prepara o arquivo CSV"""
    try:
        df = pd.read_csv(arquivo, skiprows=2)
        df = df.dropna(how='all')
        
        # Renomear colunas para nomes mais simples
        df = df.rename(columns={
            'Status da campanha': 'Status',
            'Campanha': 'Campaign',
            'Nome do or√ßamento': 'Nome_orcamento',
            'C√≥digo da moeda': 'Moeda',
            'Or√ßamento': 'Orcamento',
            'Tipo de or√ßamento': 'Tipo_orcamento',
            'Motivos do status': 'Motivos_status',
            'Pontua√ß√£o de otimiza√ß√£o': 'Pontuacao_otimizacao',
            'Tipo de campanha': 'Tipo_campanha',
            'CPV m√©dio': 'CPV_medio',
            'Intera√ß√µes': 'Interacoes',
            'Taxa de intera√ß√£o': 'Taxa_interacao',
            'Custo': 'Custo',
            'Impr.': 'Impressoes',
            'Cliques': 'Cliques',
            'Convers√µes': 'Conversoes',
            'CTR': 'CTR',
            'CPM m√©dio': 'CPM_medio',
            'CPC m√©d.': 'CPC_medio',
            'Custo / conv.': 'Custo_por_conversao',
            'Custo m√©dio': 'Custo_medio',
            'Engajamentos': 'Engajamentos',
            'IS parte sup. pesq.': 'IS_parte_superior',
            'IS 1¬™ posi√ß√£o pesq.': 'IS_primeira_posicao',
            'Visualiza√ß√µes': 'Visualizacoes',
            'Tipo de estrat√©gia de lances': 'Estrategia_lances',
            'Taxa de conv.': 'Taxa_conversao'
        })
        
        # Converter colunas num√©ricas
        for col in df.columns:
            # Verifica se a coluna √© do tipo objeto (string)
            if pd.api.types.is_object_dtype(df[col]):
                try:
                    # Remove caracteres especiais e converte para num√©rico
                    df[col] = df[col].astype(str).str.replace(',', '.').str.replace('%', '').str.replace(' ', '')
                    df[col] = pd.to_numeric(df[col], errors='ignore')
                except:
                    pass
        
        return df
    except Exception as e:
        st.error(f"Erro ao carregar arquivo: {str(e)}")
        return None

def calcular_metricas(df):
    """Calcula estat√≠sticas b√°sicas para todas as colunas num√©ricas"""
    metricas = {}
    colunas_numericas = df.select_dtypes(include=[np.number]).columns.tolist()
    
    for col in colunas_numericas:
        metricas[col] = {
            'm√©dia': df[col].mean(),
            'mediana': df[col].median(),
            'desvio_padrao': df[col].std(),
            'min': df[col].min(),
            'max': df[col].max(),
            'q1': df[col].quantile(0.25),
            'q3': df[col].quantile(0.75)
        }
    
    return metricas

def criar_boxplot(df, coluna):
    """Cria um boxplot para uma coluna num√©rica"""
    try:
        plt.figure(figsize=(8, 4))
        sns.boxplot(x=df[coluna])
        plt.title(f'Distribui√ß√£o de {coluna}')
        plt.xlabel('Valor')
        st.pyplot(plt)
        plt.close()
    except Exception as e:
        st.error(f"Erro ao criar gr√°fico: {str(e)}")

def criar_grafico_comparativo(dados_atual, dados_anterior, metrica):
    """Cria um gr√°fico comparativo entre os dois per√≠odos"""
    try:
        plt.figure(figsize=(10, 6))
        
        # Valores para compara√ß√£o
        valores = {
            'M√™s Atual': dados_atual[metrica].mean(),
            'M√™s Anterior': dados_anterior[metrica].mean()
        }
        
        # C√°lculo da varia√ß√£o percentual
        variacao = ((valores['M√™s Atual'] - valores['M√™s Anterior']) / valores['M√™s Anterior']) * 100
        
        # Gr√°fico de barras
        plt.bar(valores.keys(), valores.values(), color=['#4CAF50', '#2196F3'])
        
        # Adiciona r√≥tulos com os valores
        for i, v in enumerate(valores.values()):
            plt.text(i, v, f"{v:,.2f}", ha='center', va='bottom')
        
        # Configura√ß√µes do gr√°fico
        plt.title(f"Compara√ß√£o: {metrica}\nVaria√ß√£o: {variacao:.1f}%")
        plt.ylabel('Valor M√©dio')
        plt.grid(axis='y', linestyle='--', alpha=0.7)
        
        st.pyplot(plt)
        plt.close()
        
        return variacao
    except Exception as e:
        st.error(f"Erro ao criar gr√°fico comparativo: {str(e)}")
        return 0

def gerar_relatorio_llm(df, metricas, colunas_selecionadas, tipo_relatorio):
    """Gera um relat√≥rio anal√≠tico usando LLM"""
    if not gemini_api_key:
        return "üîí Relat√≥rio avan√ßado desabilitado. Configure a API key do Gemini para ativar esta funcionalidade."
    
    try:
        # Prepara os dados para o LLM
        dados_para_llm = ""
        
        # Resumo estat√≠stico
        dados_para_llm += "## Resumo Estat√≠stico:\n"
        for col in colunas_selecionadas:
            if col in metricas:
                stats = metricas[col]
                dados_para_llm += f"- {col}: M√©dia={stats['m√©dia']:.2f}, Mediana={stats['mediana']:.2f}, Min={stats['min']:.2f}, Max={stats['max']:.2f}\n"
        
        # Top e bottom performers
        dados_para_llm += "\n## Melhores Campanhas:\n"
        for col in colunas_selecionadas[:3]:  # Limita a 3 m√©tricas para n√£o ficar muito longo
            if col in df.columns:
                top3 = df.nlargest(3, col)[['Campaign', col]]
                dados_para_llm += f"- {col}:\n"
                for _, row in top3.iterrows():
                    dados_para_llm += f"  - {row['Campaign']}: {row[col]:.2f}\n"
        
        # Inicializa o modelo Gemini
        model = GenerativeModel('gemini-1.5-flash')
        
        # Prompt espec√≠fico baseado no tipo de relat√≥rio selecionado
        if tipo_relatorio == "t√©cnico":
            prompt = f"""
            Voc√™ √© um analista de marketing digital senior. Analise os dados de campanhas e gere um relat√≥rio T√âCNICO detalhado em portugu√™s com:
            
            1. Introdu√ß√£o com vis√£o geral
            2. An√°lise de cada m√©trica selecionada
            3. Insights sobre desempenho
            4. Recomenda√ß√µes t√©cnicas espec√≠ficas
            5. Conclus√£o com resumo executivo
            
            Dados:
            {dados_para_llm}
            
            Formate o relat√≥rio em markdown com t√≠tulos e subt√≠tulos. Seja detalhado e t√©cnico.
            """
        else:
            prompt = f"""
            Voc√™ √© um estrategista de marketing. Crie um relat√≥rio GERENCIAL em portugu√™s com:
            
            1. Vis√£o geral simplificada
            2. Principais destaques e preocupa√ß√µes
            3. An√°lise estrat√©gica do desempenho
            4. Recomenda√ß√µes de alto n√≠vel
            5. Pr√≥ximos passos sugeridos
            
            Dados:
            {dados_para_llm}
            
            Formate o relat√≥rio em markdown. Use linguagem acess√≠vel para n√£o-especialistas.
            """
        
        # Gera o conte√∫do com o Gemini
        with st.spinner("üß† Gerando relat√≥rio avan√ßado com IA..."):
            response = model.generate_content(prompt)
            return response.text
        
    except Exception as e:
        return f"Erro ao gerar relat√≥rio: {str(e)}"

# Interface do usu√°rio ===============================================

# Sess√£o para armazenar os dados carregados
if 'dados_atual' not in st.session_state:
    st.session_state.dados_atual = None
    st.session_state.dados_anterior = None

# Se√ß√£o de upload de arquivos
col1, col2 = st.columns(2)

with col1:
    st.subheader("üìÖ M√™s Atual (Mais Recente)")
    arquivo_atual = st.file_uploader(
        "Carregue o relat√≥rio do m√™s atual",
        type=["csv"],
        key="uploader_atual"
    )
    if arquivo_atual:
        df_atual = carregar_dados(arquivo_atual)
        if df_atual is not None:
            st.session_state.dados_atual = df_atual
            st.success("‚úÖ Dados do m√™s atual carregados com sucesso!")

with col2:
    st.subheader("üóìÔ∏è M√™s Anterior")
    arquivo_anterior = st.file_uploader(
        "Carregue o relat√≥rio do m√™s anterior",
        type=["csv"],
        key="uploader_anterior"
    )
    if arquivo_anterior:
        df_anterior = carregar_dados(arquivo_anterior)
        if df_anterior is not None:
            st.session_state.dados_anterior = df_anterior
            st.success("‚úÖ Dados do m√™s anterior carregados com sucesso!")

# Verifica se temos dados para an√°lise
if st.session_state.dados_atual is not None:
    df = st.session_state.dados_atual
    metricas = calcular_metricas(df)
    
    # Na parte onde definimos as colunas num√©ricas (substitua a linha original)
    colunas_numericas = [col for col in df.select_dtypes(include=[np.number]).columns.tolist() if col in df.columns]
    
    # E na se√ß√£o do multiselect, modifique para:
    with st.sidebar:
        st.header("üîß Configura√ß√µes de An√°lise")
        
        # Verifica se existem colunas num√©ricas dispon√≠veis
        metricas_disponiveis = colunas_numericas if len(colunas_numericas) > 0 else []
        
        # Sele√ß√£o de m√©tricas com verifica√ß√£o de valores padr√£o
        default_metrics = ['Custo', 'Cliques', 'Impressoes', 'CTR', 'Conversoes']
        metricas_padrao = [m for m in default_metrics if m in metricas_disponiveis]
        
        metricas_relatorio = st.multiselect(
            "Selecione as m√©tricas para an√°lise",
            options=metricas_disponiveis,
            default=metricas_padrao[:5] if len(metricas_padrao) > 0 else None
        )
        
        # Tipo de relat√≥rio
        tipo_relatorio = st.radio(
            "Tipo de relat√≥rio",
            options=["t√©cnico", "gerencial"],
            index=0
        )
        
        # Filtros
        st.subheader("Filtros")
        tipo_campanha = st.multiselect(
            "Tipo de Campanha",
            options=df['Tipo_campanha'].unique(),
            default=df['Tipo_campanha'].unique()
        )
        
        status_campanha = st.multiselect(
            "Status da Campanha",
            options=df['Status'].unique(),
            default=df['Status'].unique()
        )
        
        mostrar_boxplots = st.checkbox("Mostrar boxplots das m√©tricas")
    
    # Aplica filtros
    df_filtrado = df[
        (df['Tipo_campanha'].isin(tipo_campanha)) &
        (df['Status'].isin(status_campanha))
    ]
    
    # Abas principais
    tab1, tab2, tab3, tab4 = st.tabs(["üìã Vis√£o Geral", "üìä An√°lise por M√©trica", "üîÑ Comparativo Mensal", "üß† Relat√≥rio Avan√ßado"])
    
    with tab1:
        st.subheader("Vis√£o Geral das Campanhas - M√™s Atual")
        
        col1, col2, col3 = st.columns(3)
        col1.metric("Total de Campanhas", len(df_filtrado))
        col2.metric("Campanhas Ativas", len(df_filtrado[df_filtrado['Status'] == 'Ativo']))
        col3.metric("Campanhas Pausadas", len(df_filtrado[df_filtrado['Status'] == 'Pausado']))
        
        st.dataframe(df_filtrado, use_container_width=True)
    
    with tab2:
        st.subheader("An√°lise Detalhada por M√©trica - M√™s Atual")
        
        metrica_selecionada = st.selectbox(
            "Selecione uma m√©trica para an√°lise detalhada",
            options=colunas_numericas
        )
        
        if metrica_selecionada:
            stats = metricas[metrica_selecionada]
            
            col1, col2, col3, col4 = st.columns(4)
            col1.metric("M√©dia", f"{stats['m√©dia']:,.2f}")
            col2.metric("Mediana", f"{stats['mediana']:,.2f}")
            col3.metric("M√≠nimo", f"{stats['min']:,.2f}")
            col4.metric("M√°ximo", f"{stats['max']:,.2f}")
            
            if mostrar_boxplots:
                st.subheader("Distribui√ß√£o dos Valores")
                criar_boxplot(df_filtrado, metrica_selecionada)
            
            st.subheader("Campanhas acima da m√©dia")
            top5 = df_filtrado.nlargest(5, metrica_selecionada)[['Campaign', metrica_selecionada]]
            st.dataframe(top5.style.format({metrica_selecionada: "{:,.2f}"}))
            
            st.subheader("Campanhas abaixo da m√©dia")
            bottom5 = df_filtrado.nsmallest(5, metrica_selecionada)[['Campaign', metrica_selecionada]]
            st.dataframe(bottom5.style.format({metrica_selecionada: "{:,.2f}"}))
    
    with tab3:
        st.subheader("Comparativo Mensal")
        
        if st.session_state.dados_anterior is not None:
            # Aplica os mesmos filtros ao m√™s anterior
            df_anterior_filtrado = st.session_state.dados_anterior[
                (st.session_state.dados_anterior['Tipo_campanha'].isin(tipo_campanha)) &
                (st.session_state.dados_anterior['Status'].isin(status_campanha))
            ]
            
            metrica_comparacao = st.selectbox(
                "Selecione uma m√©trica para compara√ß√£o",
                options=colunas_numericas,
                key="comparacao_metrica"
            )
            
            if metrica_comparacao:
                variacao = criar_grafico_comparativo(df_filtrado, df_anterior_filtrado, metrica_comparacao)
                
                # Tabela comparativa detalhada
                st.subheader("An√°lise Detalhada da Compara√ß√£o")
                
                # Calcula estat√≠sticas para ambos os per√≠odos
                stats_atual = {
                    'M√©dia': df_filtrado[metrica_comparacao].mean(),
                    'Mediana': df_filtrado[metrica_comparacao].median(),
                    'M√≠nimo': df_filtrado[metrica_comparacao].min(),
                    'M√°ximo': df_filtrado[metrica_comparacao].max(),
                    'Desvio Padr√£o': df_filtrado[metrica_comparacao].std()
                }
                
                stats_anterior = {
                    'M√©dia': df_anterior_filtrado[metrica_comparacao].mean(),
                    'Mediana': df_anterior_filtrado[metrica_comparacao].median(),
                    'M√≠nimo': df_anterior_filtrado[metrica_comparacao].min(),
                    'M√°ximo': df_anterior_filtrado[metrica_comparacao].max(),
                    'Desvio Padr√£o': df_anterior_filtrado[metrica_comparacao].std()
                }
                
                # Cria DataFrame comparativo
                df_comparativo = pd.DataFrame({
                    'M√™s Atual': stats_atual,
                    'M√™s Anterior': stats_anterior
                }).T
                
                # Calcula varia√ß√µes
                df_comparativo['Varia√ß√£o (%)'] = ((df_comparativo.loc['M√™s Atual'] - df_comparativo.loc['M√™s Anterior']) / 
                                                df_comparativo.loc['M√™s Anterior']) * 100
                
                # Formata√ß√£o condicional para a varia√ß√£o
                def color_variation(val):
                    color = 'red' if val < 0 else 'green' if val > 0 else 'gray'
                    return f'color: {color}'
                
                st.dataframe(
                    df_comparativo.style.format({
                        'M√©dia': '{:,.2f}',
                        'Mediana': '{:,.2f}',
                        'M√≠nimo': '{:,.2f}',
                        'M√°ximo': '{:,.2f}',
                        'Desvio Padr√£o': '{:,.2f}',
                        'Varia√ß√£o (%)': '{:,.1f}%'
                    }).applymap(color_variation, subset=['Varia√ß√£o (%)'])
                )
        else:
            st.info("‚ÑπÔ∏è Carregue os dados do m√™s anterior para habilitar a compara√ß√£o mensal")
    
    with tab4:
        st.subheader("Relat√≥rio Avan√ßado com IA")
        
        if st.button("Gerar Relat√≥rio com An√°lise Avan√ßada"):
            relatorio = gerar_relatorio_llm(df_filtrado, metricas, metricas_relatorio, tipo_relatorio)
            
            st.markdown(relatorio)
            
            st.download_button(
                label="‚¨áÔ∏è Baixar Relat√≥rio Completo",
                data=relatorio,
                file_name=f"relatorio_{tipo_relatorio}_campanhas.md",
                mime="text/markdown"
            )
        else:
            st.info("Clique no bot√£o acima para gerar um relat√≥rio avan√ßado com an√°lise de IA")

else:
    st.info("‚ÑπÔ∏è Por favor, carregue pelo menos o relat√≥rio do m√™s atual para come√ßar a an√°lise")

# Instru√ß√µes para configurar a API
if not gemini_api_key:
    st.markdown("""
    ## üîë Configura√ß√£o da API Gemini
    Para habilitar o relat√≥rio avan√ßado com IA:
    1. Obtenha uma API key do Google Gemini
    2. Configure como vari√°vel de ambiente:
       ```bash
       export GEMINI_API_KEY='sua_chave_aqui'
       ```
    3. Reinicie o aplicativo
    """)
