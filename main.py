import streamlit as st
import pandas as pd
import numpy as np
import os
from google.generativeai import GenerativeModel
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
from pymongo import MongoClient
from bson.objectid import ObjectId

# Configura√ß√£o da p√°gina
st.set_page_config(
    layout="wide",
    page_title="Analytics de Campanhas",
    page_icon="üìä"
)

rel_metrica = '''
###BEGIN RELACAO METRICA VS TIPO DE CAMPANHA###
            üìå Search (Pesquisa)
            CTR (Taxa de Cliques) - Principal indicador de relev√¢ncia do an√∫ncio
            
            Convers√µes - Objetivo final das campanhas de busca
            
            CPC m√©dio (Custo por Clique) - Custo da aquisi√ß√£o de tr√°fego
            
            Custo por convers√£o - Efici√™ncia no ROI
            
            IS parte superior pesquisa (Impression Share) - Visibilidade nos melhores posicionamentos
            
            Taxa de convers√£o - Efic√°cia da landing page
            
            üéØ Performance Max (Pmax)
            Convers√µes - M√©trica principal deste tipo de campanha
            
            Custo por convers√£o - Efici√™ncia de custo
            
            CTR - Engajamento com os an√∫ncios
            
            Impress√µes - Alcance da campanha
            
            Taxa de convers√£o - Efic√°cia do funnel
            
            üì¢ Display
            Impress√µes - Alcance da campanha
            
            CPM m√©dio (Custo por Mil Impress√µes) - Custo da exposi√ß√£o
            
            CTR - Engajamento com os banners
            
            Convers√µes (se for o objetivo)
            
            Visualiza√ß√µes (para creatives interativos)
            
            üìπ Video
            Visualiza√ß√µes (Views) - Pessoas que assistiram o v√≠deo
            
            CPV m√©dio (Custo por Visualiza√ß√£o) - Custo da aten√ß√£o
            
            Engajamentos - Intera√ß√µes com o v√≠deo
            
            Taxa de intera√ß√£o - % de quem interagiu
            
            Convers√µes (se for campanha de convers√£o)
            
            üîç Discovery
            CTR - Relev√¢ncia dos an√∫ncios
            
            Convers√µes - Resultados concretos
            
            CPC m√©dio - Custo da descoberta
            
            Impress√µes - Alcance org√¢nico+paid
            
            Taxa de convers√£o - Efic√°cia p√≥s-clique
            
            üè∑Ô∏è Alcance (Reach)
            Impress√µes - Quantas vezes foi exibido
            
            CPM m√©dio - Custo do alcance
            
            Frequ√™ncia (calculada: Impress√µes/√önicos) - N√∫mero m√©dio de visualiza√ß√µes por usu√°rio
            
            Engajamentos - Intera√ß√µes com o conte√∫do
            
            üìä M√©tricas Universais Importantes
            (Relevantes para todos os tipos)
            
            Custo - Investimento total
            
            Or√ßamento vs Custo - Compara√ß√£o planejado vs realizado
            
            Pontua√ß√£o de otimiza√ß√£o - Sa√∫de geral da campanha
            
            Status da campanha - Campanhas ativas/pausadas
            
            üìâ M√©tricas de Qualidade
            IS parte superior pesquisa (para Search) - Posicionamento premium
            
            IS 1¬™ posi√ß√£o pesquisa (para Search) - Lideran√ßa nos resultados
            
            Taxa de intera√ß√£o (para Video/Display) - Engajamento qualificado
            ###END RELACAO METRICA VS CAMPANHA###
'''

# T√≠tulo principal
st.title("üìä Analytics Avan√ßado de Campanhas Digitais")

# Conex√£o com MongoDB
client = MongoClient("mongodb+srv://gustavoromao3345:RqWFPNOJQfInAW1N@cluster0.5iilj.mongodb.net/auto_doc?retryWrites=true&w=majority&ssl=true&ssl_cert_reqs=CERT_NONE&tlsAllowInvalidCertificates=true")
db = client['arquivos_planejamento']
collection = db['auto_doc']
banco = client["arquivos_planejamento"]
db_clientes = banco["clientes"]  # info clientes

# Verifica se a API key do Gemini est√° configurada
gemini_api_key = os.getenv("GEMINI_API_KEY")
if not gemini_api_key:
    st.warning("‚ö†Ô∏è Chave da API Gemini n√£o encontrada. O relat√≥rio avan√ßado ser√° limitado.")

# Fun√ß√µes do aplicativo ==============================================

# No in√≠cio do c√≥digo, adicione uma fun√ß√£o para detectar o tipo de campanha pelo nome
def detectar_tipo_campanha(nome_campanha):
    nome = nome_campanha.lower()
    if 'search' in nome:
        return 'Search'
    elif 'alcance' in nome or 'reach' in nome:
        return 'Alcance'
    elif 'conversao' in nome or 'convers√£o' in nome or 'conversion' in nome:
        return 'Convers√£o'
    elif 'display' in nome:
        return 'Display'
    elif 'video' in nome or 'v√≠deo' in nome:
        return 'Video'
    elif 'discovery' in nome:
        return 'Discovery'
    elif 'pmax' in nome or 'performance max' in nome:
        return 'Performance Max'
    else:
        return 'Outros'



def carregar_dados(arquivo):
    """Carrega e prepara o arquivo CSV"""
    try:
        df = pd.read_csv(arquivo, skiprows=2)
        df = df.dropna(how='all')
        
        # Renomear colunas para nomes consistentes
        df.columns = [
            'Status da campanha', 'Campanha', 'Nome do or√ßamento', 'C√≥digo da moeda', 
            'Or√ßamento', 'Tipo de or√ßamento', 'Status', 'Motivos do status', 
            'Pontua√ß√£o de otimiza√ß√£o', 'Tipo de campanha', 'CPV m√©dio', 'Intera√ß√µes', 
            'Taxa de intera√ß√£o', 'Custo', 'Impress√µes', 'Cliques', 'Convers√µes', 
            'CTR', 'CPM m√©dio', 'CPC m√©dio', 'Custo por convers√£o', 'Custo m√©dio', 
            'Engajamentos', 'IS parte superior pesquisa', 'IS 1¬™ posi√ß√£o pesquisa', 
            'Visualiza√ß√µes', 'Tipo de estrat√©gia de lances', 'Taxa de convers√£o'
        ]
        
        for col in df.columns:
            if df[col].dtype == 'object':
                df[col] = df[col].astype(str).str.replace(',', '').str.replace('%', '').str.replace(' ', '')
                try:
                    df[col] = pd.to_numeric(df[col], errors='ignore')
                except:
                    pass
        
        return df
    except Exception as e:
        st.error(f"Erro ao carregar arquivo: {str(e)}")
        return None

def calcular_metricas(df):
    """Calcula estat√≠sticas b√°sicas para todas as colunas num√©ricas"""
    metricas = {}
    colunas_numericas = df.select_dtypes(include=[np.number]).columns.tolist()
    
    for col in colunas_numericas:
        metricas[col] = {
            'm√©dia': df[col].mean(),
            'mediana': df[col].median(),
            'desvio_padrao': df[col].std(),
            'min': df[col].min(),
            'max': df[col].max(),
            'q1': df[col].quantile(0.25),
            'q3': df[col].quantile(0.75)
        }
    
    return metricas

def criar_boxplot(df, coluna):
    """Cria um boxplot para uma coluna num√©rica"""
    try:
        plt.figure(figsize=(8, 4))
        sns.boxplot(x=df[coluna])
        plt.title(f'Distribui√ß√£o de {coluna}')
        plt.xlabel('Valor')
        st.pyplot(plt)
        plt.close()
    except Exception as e:
        st.error(f"Erro ao criar gr√°fico: {str(e)}")

def criar_grafico_comparativo(dados_atual, dados_anterior, metrica):
    """Cria um gr√°fico comparativo entre os dois per√≠odos"""
    try:
        plt.figure(figsize=(10, 6))
        
        # Valores para compara√ß√£o
        valores = {
            'M√™s Atual': dados_atual[metrica].mean(),
            'M√™s Anterior': dados_anterior[metrica].mean()
        }
        
        # C√°lculo da varia√ß√£o percentual
        variacao = ((valores['M√™s Atual'] - valores['M√™s Anterior']) / valores['M√™s Anterior']) * 100
        
        # Gr√°fico de barras
        plt.bar(valores.keys(), valores.values(), color=['#4CAF50', '#2196F3'])
        
        # Adiciona r√≥tulos com os valores
        for i, v in enumerate(valores.values()):
            plt.text(i, v, f"{v:,.2f}", ha='center', va='bottom')
        
        # Configura√ß√µes do gr√°fico
        plt.title(f"Compara√ß√£o: {metrica}\nVaria√ß√£o: {variacao:.1f}%")
        plt.ylabel('Valor M√©dio')
        plt.grid(axis='y', linestyle='--', alpha=0.7)
        
        st.pyplot(plt)
        plt.close()
        
        return variacao
    except Exception as e:
        st.error(f"Erro ao criar gr√°fico comparativo: {str(e)}")
        return 0

def salvar_relatorio_mongodb(relatorio_data):
    """Salva o relat√≥rio no MongoDB"""
    try:
        result = collection.insert_one(relatorio_data)
        return str(result.inserted_id)
    except Exception as e:
        st.error(f"Erro ao salvar no MongoDB: {str(e)}")
        return None

def gerar_relatorio_llm(df, metricas, colunas_selecionadas, tipo_relatorio, cliente_info=None, df_anterior=None):
    """Gera um relat√≥rio anal√≠tico usando LLM e salva no MongoDB"""
    if not gemini_api_key:
        return "üîí Relat√≥rio avan√ßado desabilitado. Configure a API key do Gemini para ativar esta funcionalidade."
    
    try:
        # Prepara os dados para o LLM
        dados_para_llm = ""
        
        # Resumo estat√≠stico do per√≠odo atual
        dados_para_llm += "## Resumo Estat√≠stico - M√™s Atual:\n"
        for col in colunas_selecionadas:
            if col in metricas:
                stats = metricas[col]
                dados_para_llm += f"- {col}: M√©dia={stats['m√©dia']:.2f}, Mediana={stats['mediana']:.2f}, Min={stats['min']:.2f}, Max={stats['max']:.2f}\n"
        
        # Se tivermos dados do m√™s anterior, adicionamos an√°lise comparativa
        if df_anterior is not None:
            metricas_anterior = calcular_metricas(df_anterior)
            dados_para_llm += "\n## An√°lise Comparativa Mensal:\n"
            
            # Calcula varia√ß√µes para cada m√©trica
            for col in colunas_selecionadas:
                if col in metricas and col in metricas_anterior:
                    media_atual = metricas[col]['m√©dia']
                    media_anterior = metricas_anterior[col]['m√©dia']
                    variacao = ((media_atual - media_anterior) / media_anterior) * 100 if media_anterior != 0 else 0
                    
                    dados_para_llm += (f"- {col}: {media_atual:.2f} (M√™s Atual) vs {media_anterior:.2f} (M√™s Anterior) ‚Üí "
                                      f"{'‚Üë' if variacao > 0 else '‚Üì'} {abs(variacao):.1f}%\n")
        
        # Top e bottom performers
        dados_para_llm += "\n## Melhores Campanhas - M√™s Atual:\n"
        for col in colunas_selecionadas[:3]:  # Limita a 3 m√©tricas para n√£o ficar muito longo
            if col in df.columns:
                top3 = df.nlargest(3, col)[['Campanha', col]]
                dados_para_llm += f"- {col}:\n"
                for _, row in top3.iterrows():
                    dados_para_llm += f"  - {row['Campanha']}: {row[col]:.2f}\n"
        
        # An√°lise de correla√ß√£o entre m√©tricas (quando temos ambos per√≠odos)
        if df_anterior is not None:
            dados_para_llm += "\n## Insights de Correla√ß√£o:\n"
            dados_para_llm += "- Compara√ß√£o autom√°tica entre varia√ß√µes de m√©tricas:\n"
            
            # Calcula varia√ß√µes percentuais para todas as m√©tricas
            variacoes = {}
            for col in colunas_selecionadas:
                if col in metricas and col in metricas_anterior:
                    media_atual = metricas[col]['m√©dia']
                    media_anterior = metricas_anterior[col]['m√©dia']
                    variacoes[col] = ((media_atual - media_anterior) / media_anterior) * 100 if media_anterior != 0 else 0
            
            # Adiciona exemplos de insights combinados
            dados_para_llm += "  - Exemplo de an√°lise combinada que ser√° gerada pelo LLM:\n"
            dados_para_llm += "    * Se CTR aumentou mas Convers√µes ca√≠ram, pode indicar tr√°fego menos qualificado\n"
            dados_para_llm += "    * Se Custo por Convers√£o caiu e Convers√µes aumentaram, indica efici√™ncia melhorada\n"
            dados_para_llm += "    * Se Impress√µes ca√≠ram mas Engajamentos aumentaram, pode indicar p√∫blico mais segmentado\n"
        
        # Inicializa o modelo Gemini
        model = GenerativeModel('gemini-2.0-flash')
        
        # Gera o conte√∫do com o Gemini
        with st.spinner("üß† Gerando relat√≥rio avan√ßado com IA..."):
            # Dicion√°rio para armazenar todas as partes do relat√≥rio
            relatorio_completo = {
                "partes": [],
                "texto_completo": ""
            }
            
            # Gera cada parte do relat√≥rio
            prompts = []
            if tipo_relatorio == "t√©cnico":
                prompts = [
                    ("1. Introdu√ß√£o com vis√£o geral", f"""
                    - Quando mencionar m√©tricas, considere o enfoque m√©trica vs tipo de campanha: {rel_metrica}
                    
                    Voc√™ √© um analista de marketing digital senior. Gere a introdu√ß√£o de um relat√≥rio T√âCNICO detalhado em portugu√™s com:
                    - Vis√£o geral do desempenho das campanhas
                    - Contexto sobre os dados analisados
                    - Destaque inicial dos pontos mais relevantes
                    
                    Dados: {dados_para_llm}
                    
                    """),
                    ("2. An√°lise de cada m√©trica selecionada", f"""
                    - Quando mencionar m√©tricas, considere o enfoque m√©trica vs tipo de campanha: {rel_metrica}
                    Fa√ßa uma an√°lise t√©cnica detalhada de cada m√©trica selecionada, incluindo:
                    - Significado de cada m√©trica
                    - Performance em rela√ß√£o aos benchmarks do setor
                    - Rela√ß√£o com o tipo de campanha
                    
                    Dados: {dados_para_llm}
 
                    """),
                    ("3. Comparativo mensal detalhado", f"""
                    - Quando mencionar m√©tricas, considere o enfoque m√©trica vs tipo de campanha: {rel_metrica}
                    Analise comparativamente os dados com o m√™s anterior (quando dispon√≠vel):
                    - Varia√ß√µes percentuais significativas
                    - Tend√™ncias identificadas
                    - Poss√≠veis causas para as varia√ß√µes
                    
                    Dados: {dados_para_llm}

                    """),
                    ("4. Insights sobre correla√ß√µes", f"""
                    - Quando mencionar m√©tricas, considere o enfoque m√©trica vs tipo de campanha: {rel_metrica}
                    Identifique correla√ß√µes importantes entre as m√©tricas:
                    - Rela√ß√µes causa-efeito
                    - Padr√µes de desempenho
                    - Anomalias e outliers
                    
                    Dados: {dados_para_llm}
        
                    """),
                    ("5. Recomenda√ß√µes t√©cnicas", f"""
                    - Quando mencionar m√©tricas, considere o enfoque m√©trica vs tipo de campanha: {rel_metrica}
                    Gere recomenda√ß√µes t√©cnicas espec√≠ficas baseadas na an√°lise:
                    - Ajustes em campanhas
                    - Otimiza√ß√µes sugeridas
                    - Alertas sobre problemas identificados
                    
                    Dados: {dados_para_llm}
 
                    """),
                    ("6. Conclus√£o com resumo executivo", f"""
                    - Quando mencionar m√©tricas, considere o enfoque m√©trica vs tipo de campanha: {rel_metrica}
                    Conclua com um resumo executivo t√©cnico:
                    - Principais achados
                    - Recomenda√ß√µes priorit√°rias
                    - Pr√≥ximos passos sugeridos
                    
                    Dados: {dados_para_llm}

                    """)
                ]
            else:
                prompts = [
                    ("1. Vis√£o geral simplificada", f"""
                    - Quando mencionar m√©tricas, considere o enfoque m√©trica vs tipo de campanha: {rel_metrica}
                    Voc√™ √© um estrategista de marketing. Gere uma vis√£o geral simplificada em portugu√™s com:
                    - Principais resultados
                    - Destaques e preocupa√ß√µes
                    - Contexto estrat√©gico
                    
                    Dados: {dados_para_llm}
        
                    """),
                    ("2. Principais destaques e preocupa√ß√µes", f"""
                    - Quando mencionar m√©tricas, considere o enfoque m√©trica vs tipo de campanha: {rel_metrica}
                    Destaque os pontos mais relevantes e preocupa√ß√µes:
                    - Compara√ß√µes mensais
                    - Varia√ß√µes significativas
                    - Impacto estrat√©gico dado o tipo de campanha
                    - Alinhamento com objetivos dado o tipo de campanha
                    
                    Dados: {dados_para_llm}

                    """),
                    ("3. An√°lise estrat√©gica do desempenho", f"""
                    - Quando mencionar m√©tricas, considere o enfoque m√©trica vs tipo de campanha: {rel_metrica}
                    Analise o desempenho com foco em tend√™ncias:
                    - Padr√µes de longo prazo
                    - Efic√°cia estrat√©gica
                    - Alinhamento com objetivos dado o tipo de campanha
                    
                    Dados: {dados_para_llm}

                    """),
                    ("4. Rela√ß√µes entre m√©tricas", f"""
                    - Quando mencionar m√©tricas, considere o enfoque m√©trica vs tipo de campanha: {rel_metrica}
                    Explique como as m√©tricas se relacionam e impactam os resultados:
                    - Conex√µes importantes
                    - Trade-offs identificados
                    - Sinergias encontradas
                    
                    Dados: {dados_para_llm}

                    """),
                    ("5. Recomenda√ß√µes de alto n√≠vel", f"""
                    - Quando mencionar m√©tricas, considere o enfoque m√©trica vs tipo de campanha: {rel_metrica}
                    Gere recomenda√ß√µes estrat√©gicas:
                    - Direcionamentos gerais
                    - Prioriza√ß√µes sugeridas
                    - Ajustes recomendados
                    
                    Dados: {dados_para_llm}

                    """),
                    ("6. Pr√≥ximos passos sugeridos", f"""
                    - Quando mencionar m√©tricas, considere o enfoque m√©trica vs tipo de campanha: {rel_metrica}
                    Defina os pr√≥ximos passos estrat√©gicos:
                    - A√ß√µes imediatas
                    - Monitoramentos necess√°rios
                    - Planejamento futuro
                    
                    Dados: {dados_para_llm}

                    """)
                ]
            
            # Gera cada parte do relat√≥rio
            for titulo, prompt in prompts:
                with st.spinner(f"Gerando {titulo.lower()}..."):
                    response = model.generate_content(prompt)
                    parte_relatorio = {
                        "titulo": titulo,
                        "conteudo": response.text
                    }
                    relatorio_completo["partes"].append(parte_relatorio)
                    relatorio_completo["texto_completo"] += f"\n\n## {titulo}\n\n{response.text}"
            
            # Prepara os dados para salvar no MongoDB
            relatorio_data = {
                "tipo": tipo_relatorio,
                "partes": relatorio_completo["partes"],
                "texto_completo": relatorio_completo["texto_completo"],
                "metricas_analisadas": colunas_selecionadas,
                "data_geracao": datetime.now(),
                "cliente": cliente_info if cliente_info else "N√£o especificado",
                "status": "ativo",
                "comparativo_mensal": df_anterior is not None
            }
            
            # Salva no MongoDB
            relatorio_id = salvar_relatorio_mongodb(relatorio_data)
            if relatorio_id:
                st.success("‚úÖ Relat√≥rio salvo no banco de dados com sucesso!")
            
            return relatorio_completo
        
    except Exception as e:
        return {
            "partes": [{"titulo": "Erro", "conteudo": f"Erro ao gerar relat√≥rio: {str(e)}"}],
            "texto_completo": f"Erro ao gerar relat√≥rio: {str(e)}"
        }


        
       

# Interface do usu√°rio ===============================================

# Sess√£o para armazenar os dados carregados
if 'dados_atual' not in st.session_state:
    st.session_state.dados_atual = None
    st.session_state.dados_anterior = None

# Se√ß√£o de upload de arquivos e informa√ß√µes do cliente
col1, col2 = st.columns(2)

with col1:
    st.subheader("üìÖ M√™s Atual (Mais Recente)")
    arquivo_atual = st.file_uploader(
        "Carregue o relat√≥rio do m√™s atual",
        type=["csv"],
        key="uploader_atual"
    )
    if arquivo_atual:
        df_atual = carregar_dados(arquivo_atual)
        if df_atual is not None:
            st.session_state.dados_atual = df_atual
            st.success("‚úÖ Dados do m√™s atual carregados com sucesso!")

with col2:
    st.subheader("üóìÔ∏è M√™s Anterior")
    arquivo_anterior = st.file_uploader(
        "Carregue o relat√≥rio do m√™s anterior",
        type=["csv"],
        key="uploader_anterior"
    )
    if arquivo_anterior:
        df_anterior = carregar_dados(arquivo_anterior)
        if df_anterior is not None:
            st.session_state.dados_anterior = df_anterior
            st.success("‚úÖ Dados do m√™s anterior carregados com sucesso!")

# Se√ß√£o de informa√ß√µes do cliente
with st.expander("‚ÑπÔ∏è Informa√ß√µes do Cliente (Opcional)"):
    cliente_nome = st.text_input("Nome do Cliente")
    cliente_id = st.text_input("ID do Cliente (se aplic√°vel)")
    cliente_tags = st.text_input("Tags (separadas por v√≠rgula)")
    
    cliente_info = {
        "nome": cliente_nome,
        "id": cliente_id,
        "tags": [tag.strip() for tag in cliente_tags.split(",")] if cliente_tags else []
    }

# Verifica se temos dados para an√°lise
if st.session_state.dados_atual is not None:
    df = st.session_state.dados_atual
    metricas = calcular_metricas(df)
    colunas_numericas = [col for col in metricas.keys()]
    
    with st.sidebar:
        st.header("üîß Configura√ß√µes de An√°lise")
        
        # Sele√ß√£o de m√©tricas
        metricas_relatorio = st.multiselect(
            "Selecione as m√©tricas para an√°lise",
            options=colunas_numericas,
            default=colunas_numericas[:5] if len(colunas_numericas) > 5 else colunas_numericas
        )
        
        # Tipo de relat√≥rio
        tipo_relatorio = st.radio(
            "Tipo de relat√≥rio",
            options=["t√©cnico", "gerencial"],
            index=0
        )
        
        # Filtros
        st.subheader("Filtros")
        
        # Adiciona coluna de tipo detectado ao dataframe
        if st.session_state.dados_atual is not None:
            df = st.session_state.dados_atual.copy()
            df['Tipo Detectado'] = df['Campanha'].apply(detectar_tipo_campanha)
            
            # Filtro por tipo detectado
            tipos_detectados = sorted(df['Tipo Detectado'].unique())
            tipos_selecionados = st.multiselect(
                "Tipo de Campanha (detectado pelo nome)",
                options=tipos_detectados,
                default=tipos_detectados
            )
        
        tipo_campanha = st.multiselect(
            "Tipo de Campanha (do relat√≥rio)",
            options=df['Tipo de campanha'].unique(),
            default=df['Tipo de campanha'].unique()
        )
        
        status_campanha = st.multiselect(
            "Status da Campanha",
            options=df['Status da campanha'].unique(),
            default=df['Status da campanha'].unique()
        )
        
        mostrar_boxplots = st.checkbox("Mostrar boxplots das m√©tricas")
    
    # Modifica a aplica√ß√£o dos filtros para incluir o tipo detectado
    df_filtrado = df[
        (df['Tipo Detectado'].isin(tipos_selecionados)) &
        (df['Tipo de campanha'].isin(tipo_campanha)) &
        (df['Status da campanha'].isin(status_campanha))
    ]
    
    # Abas principais
    tab1, tab2, tab3, tab4 = st.tabs(["üìã Vis√£o Geral", "üìä An√°lise por M√©trica", "üîÑ Comparativo Mensal", "üß† Relat√≥rio Avan√ßado"])
    
    with tab1:
        st.subheader("Vis√£o Geral das Campanhas - M√™s Atual")
        
        col1, col2, col3 = st.columns(3)
        col1.metric("Total de Campanhas", len(df_filtrado))
        col2.metric("Campanhas Ativas", len(df_filtrado[df_filtrado['Status da campanha'] == 'Ativa']))
        col3.metric("Campanhas Pausadas", len(df_filtrado[df_filtrado['Status da campanha'] == 'Pausada']))
        
        st.dataframe(df_filtrado, use_container_width=True)
    
    with tab2:
        st.subheader("An√°lise Detalhada por M√©trica - M√™s Atual")
        
        metrica_selecionada = st.selectbox(
            "Selecione uma m√©trica para an√°lise detalhada",
            options=colunas_numericas
        )
        
        if metrica_selecionada:
            stats = metricas[metrica_selecionada]
            
            col1, col2, col3, col4 = st.columns(4)
            col1.metric("M√©dia", f"{stats['m√©dia']:,.2f}")
            col2.metric("Mediana", f"{stats['mediana']:,.2f}")
            col3.metric("M√≠nimo", f"{stats['min']:,.2f}")
            col4.metric("M√°ximo", f"{stats['max']:,.2f}")
            
            if mostrar_boxplots:
                st.subheader("Distribui√ß√£o dos Valores")
                criar_boxplot(df_filtrado, metrica_selecionada)
            
            st.subheader("Campanhas acima da m√©dia")
            top5 = df_filtrado.nlargest(5, metrica_selecionada)[['Campanha', metrica_selecionada]]
            st.dataframe(top5.style.format({metrica_selecionada: "{:,.2f}"}))
            
            st.subheader("Campanhas abaixo da m√©dia")
            bottom5 = df_filtrado.nsmallest(5, metrica_selecionada)[['Campanha', metrica_selecionada]]
            st.dataframe(bottom5.style.format({metrica_selecionada: "{:,.2f}"}))
    
    with tab3:
        st.subheader("Comparativo Mensal")
        
        if st.session_state.dados_anterior is not None:
            # Aplica os mesmos filtros ao m√™s anterior
            df_anterior_filtrado = st.session_state.dados_anterior[
                (st.session_state.dados_anterior['Tipo de campanha'].isin(tipo_campanha)) &
                (st.session_state.dados_anterior['Status da campanha'].isin(status_campanha))
            ]
            
            metrica_comparacao = st.selectbox(
                "Selecione uma m√©trica para compara√ß√£o",
                options=colunas_numericas,
                key="comparacao_metrica"
            )
            
            if metrica_comparacao:
                variacao = criar_grafico_comparativo(df_filtrado, df_anterior_filtrado, metrica_comparacao)
                
                # Tabela comparativa detalhada
                st.subheader("An√°lise Detalhada da Compara√ß√£o")
                
                # Calcula estat√≠sticas para ambos os per√≠odos
                stats_atual = {
                    'M√©dia': df_filtrado[metrica_comparacao].mean(),
                    'Mediana': df_filtrado[metrica_comparacao].median(),
                    'M√≠nimo': df_filtrado[metrica_comparacao].min(),
                    'M√°ximo': df_filtrado[metrica_comparacao].max(),
                    'Desvio Padr√£o': df_filtrado[metrica_comparacao].std()
                }
                
                stats_anterior = {
                    'M√©dia': df_anterior_filtrado[metrica_comparacao].mean(),
                    'Mediana': df_anterior_filtrado[metrica_comparacao].median(),
                    'M√≠nimo': df_anterior_filtrado[metrica_comparacao].min(),
                    'M√°ximo': df_anterior_filtrado[metrica_comparacao].max(),
                    'Desvio Padr√£o': df_anterior_filtrado[metrica_comparacao].std()
                }
                
                # Cria DataFrame comparativo
                df_comparativo = pd.DataFrame({
                    'M√™s Atual': stats_atual,
                    'M√™s Anterior': stats_anterior
                }).T
                
                # Calcula varia√ß√µes
                df_comparativo['Varia√ß√£o (%)'] = ((df_comparativo.loc['M√™s Atual'] - df_comparativo.loc['M√™s Anterior']) / 
                                                df_comparativo.loc['M√™s Anterior']) * 100
                
                # Formata√ß√£o condicional para a varia√ß√£o
                def color_variation(val):
                    color = 'red' if val < 0 else 'green' if val > 0 else 'gray'
                    return f'color: {color}'
                
                st.dataframe(
                    df_comparativo.style.format({
                        'M√©dia': '{:,.2f}',
                        'Mediana': '{:,.2f}',
                        'M√≠nimo': '{:,.2f}',
                        'M√°ximo': '{:,.2f}',
                        'Desvio Padr√£o': '{:,.2f}',
                        'Varia√ß√£o (%)': '{:,.1f}%'
                    }).applymap(color_variation, subset=['Varia√ß√£o (%)'])
                )
        else:
            st.info("‚ÑπÔ∏è Carregue os dados do m√™s anterior para habilitar a compara√ß√£o mensal")
    
    # Na interface do usu√°rio, na parte do relat√≥rio (tab4):
    with tab4:
        st.subheader("Relat√≥rio Avan√ßado com IA")
        
        if st.button("Gerar Relat√≥rio com An√°lise Avan√ßada"):
            relatorio = gerar_relatorio_llm(
                df_filtrado, 
                metricas, 
                metricas_relatorio, 
                tipo_relatorio, 
                cliente_info,
                st.session_state.dados_anterior if st.session_state.dados_anterior is not None else None
            )
            
            # Exibe cada parte do relat√≥rio em se√ß√µes expans√≠veis
            for parte in relatorio["partes"]:
                with st.expander(f"**{parte['titulo']}**"):
                    st.markdown(parte["conteudo"])
            
            # Bot√£o para download
            st.download_button(
                label="‚¨áÔ∏è Baixar Relat√≥rio Completo",
                data=relatorio["texto_completo"],
                file_name=f"relatorio_{tipo_relatorio}_campanhas.md",
                mime="text/markdown"
            )
            
            # Mostra hist√≥rico de relat√≥rios salvos para este cliente (se houver ID)
            if cliente_info.get('id'):
                st.subheader("Hist√≥rico de Relat√≥rios")
                relatorios_anteriores = list(collection.find({
                    "cliente.id": cliente_info['id'],
                    "status": "ativo"
                }).sort("data_geracao", -1).limit(5))
                
                if relatorios_anteriores:
                    for rel in relatorios_anteriores:
                        with st.expander(f"Relat√≥rio de {rel['data_geracao'].strftime('%d/%m/%Y %H:%M')}"):
                            for parte in rel.get('partes', []):
                                st.markdown(f"**{parte['titulo']}**")
                                st.markdown(parte['conteudo'][:200] + "...")
                else:
                    st.info("Nenhum relat√≥rio anterior encontrado para este cliente")
        else:
            st.info("Clique no bot√£o acima para gerar um relat√≥rio avan√ßado com an√°lise de IA")

else:
    st.info("‚ÑπÔ∏è Por favor, carregue pelo menos o relat√≥rio do m√™s atual para come√ßar a an√°lise")

# Instru√ß√µes para configurar a API
if not gemini_api_key:
    st.markdown("""
    ## üîë Configura√ß√£o da API Gemini
    Para habilitar o relat√≥rio avan√ßado com IA:
    1. Obtenha uma API key do Google Gemini
    2. Configure como vari√°vel de ambiente:
       ```bash
       export GEMINI_API_KEY='sua_chave_aqui'
       ```
    3. Reinicie o aplicativo
    """)
