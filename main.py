import streamlit as st
import pandas as pd
import numpy as np
import os
from google.generativeai import GenerativeModel
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
from pymongo import MongoClient
from bson.objectid import ObjectId
import hashlib
import time
from google import genai
from google.genai.types import Tool, GenerateContentConfig, GoogleSearch

# Configura√ß√£o da p√°gina
st.set_page_config(
    layout="wide",
    page_title="Analytics de Campanhas",
    page_icon="üìä"
)

rel_metrica = '''
           ###BEGIN RELACAO METRICA VS TIPO DE CAMPANHA###
            Tipo: üìå Search (Pesquisa) -> Aten√ß√£o para as m√©tricas:
            *O que √©:* Campanhas de busca no Google que aparecem quando usu√°rios pesquisam por termos relacionados.  
            *Objetivos:* Capturar demanda existente, gerar leads/vendas com alta inten√ß√£o de compra.  
            *M√©tricas-chave:*
            CTR (Taxa de Cliques) - Principal indicador de relev√¢ncia do an√∫ncio  
            Convers√µes - Objetivo final das campanhas de busca  
            CPC m√©dio (Custo por Clique) - Custo da aquisi√ß√£o de tr√°fego  
            Custo por convers√£o - Efici√™ncia no ROI  
            IS parte superior pesquisa (Impression Share) - Visibilidade nos melhores posicionamentos  
            Taxa de convers√£o - Efic√°cia da landing page  
            
            Tipo: üéØ Performance Max (Pmax) -> Aten√ß√£o para as m√©tricas:
            *O que √©:* Campanhas automatizadas que usam todos os invent√°rios do Google (YouTube, Display, Search etc.).  
            *Objetivos:* Maximizar convers√µes com or√ßamento otimizado automaticamente.  
            *M√©tricas-chave:*
            Convers√µes - M√©trica principal deste tipo de campanha  
            Custo por convers√£o - Efici√™ncia de custo  
            CTR - Engajamento com os an√∫ncios  
            Impress√µes - Alcance da campanha  
            Taxa de convers√£o - Efic√°cia do funnel  
            
            Tipo: üì¢ Display -> Aten√ß√£o para as m√©tricas:
            *O que √©:* An√∫ncios visuais em sites parceiros do Google.  
            *Objetivos:* Aumentar awareness, remarketing e constru√ß√£o de marca.  
            *M√©tricas-chave:*
            Impress√µes - Alcance da campanha  
            CPM m√©dio (Custo por Mil Impress√µes) - Custo da exposi√ß√£o  
            CTR - Engajamento com os banners  
            Convers√µes (se for o objetivo)  
            Visualiza√ß√µes (para creatives interativos)  
            
            Tipo: üìπ Video -> Aten√ß√£o para as m√©tricas:
            *O que √©:* An√∫ncios em formato de v√≠deo no YouTube e parceiros.  
            *Objetivos:* Engajamento emocional, storytelling de marca e considera√ß√£o.  
            *M√©tricas-chave:*
            Visualiza√ß√µes (Views) - Pessoas que assistiram o v√≠deo  
            CPV m√©dio (Custo por Visualiza√ß√£o) - Custo da aten√ß√£o  
            Engajamentos - Intera√ß√µes com o v√≠deo  
            Taxa de intera√ß√£o - % de quem interagiu  
            Convers√µes (se for campanha de convers√£o)  
            
            Tipo: üîç Discovery -> Aten√ß√£o para as m√©tricas:
            *O que √©:* An√∫ncios nativos no Discover, Gmail e YouTube Home.  
            *Objetivos:* Descobrimento de novos clientes com conte√∫do relevante.  
            *M√©tricas-chave:*
            CTR - Relev√¢ncia dos an√∫ncios  
            Convers√µes - Resultados concretos  
            CPC m√©dio - Custo da descoberta  
            Impress√µes - Alcance org√¢nico+paid  
            Taxa de convers√£o - Efic√°cia p√≥s-clique  
            
            Tipo: üè∑Ô∏è Alcance (Reach) -> Aten√ß√£o para as m√©tricas:
            *O que √©:* Campanhas focadas em maximizar alcance √∫nico.  
            *Objetivos:* Aumentar awareness de marca com frequ√™ncia controlada.  
            *M√©tricas-chave:*
            Impress√µes - Quantas vezes foi exibido  
            CPM m√©dio - Custo do alcance  
            Frequ√™ncia (calculada: Impress√µes/√önicos) - N√∫mero m√©dio de visualiza√ß√µes por usu√°rio  
            Engajamentos - Intera√ß√µes com o conte√∫do  
            
            üìä M√©tricas Universais Importantes
            (Relevantes para todos os tipos)
            
            Custo - Investimento total  
            Or√ßamento vs Custo - Compara√ß√£o planejado vs realizado  
            Pontua√ß√£o de otimiza√ß√£o - Sa√∫de geral da campanha  
            Status da campanha - Campanhas ativas/pausadas  
            
            üìâ M√©tricas de Qualidade
            IS parte superior pesquisa (para Search) - Posicionamento premium  
            IS 1¬™ posi√ß√£o pesquisa (para Search) - Lideran√ßa nos resultados  
            Taxa de intera√ß√£o (para Video/Display) - Engajamento qualificado  
###END RELACAO METRICA VS CAMPANHA###
'''

# Conex√£o com MongoDB
client = MongoClient("mongodb+srv://gustavoromao3345:RqWFPNOJQfInAW1N@cluster0.5iilj.mongodb.net/auto_doc?retryWrites=true&w=majority&ssl=true&ssl_cert_reqs=CERT_NONE&tlsAllowInvalidCertificates=true")
db = client['arquivos_planejamento']
collection = db['auto_doc']
banco = client["arquivos_planejamento"]
db_clientes = banco["clientes"]  # info clientes
db_usuarios = banco["usuarios"]  # cole√ß√£o para usu√°rios
db_relatorios = banco["relatorios"]  # cole√ß√£o espec√≠fica para relat√≥rios

# Verifica se a API key do Gemini est√° configurada
gemini_api_key = os.getenv("GEMINI_API_KEY")
if not gemini_api_key:
    st.warning("‚ö†Ô∏è Chave da API Gemini n√£o encontrada. O relat√≥rio avan√ßado ser√° limitado.")

# Fun√ß√µes do aplicativo ==============================================

def criar_usuario(email, senha, nome):
    """Cria um novo usu√°rio no banco de dados"""
    if db_usuarios.find_one({"email": email}):
        return False, "Usu√°rio j√° existe"
    
    senha_hash = hashlib.sha256(senha.encode()).hexdigest()
    
    novo_usuario = {
        "email": email,
        "senha": senha_hash,
        "nome": nome,
        "data_criacao": datetime.now(),
        "ultimo_login": None,
        "ativo": True
    }
    
    try:
        db_usuarios.insert_one(novo_usuario)
        return True, "Usu√°rio criado com sucesso"
    except Exception as e:
        return False, f"Erro ao criar usu√°rio: {str(e)}"

def verificar_login(email, senha):
    """Verifica as credenciais do usu√°rio"""
    usuario = db_usuarios.find_one({"email": email})
    
    if not usuario:
        return False, None, "Usu√°rio n√£o encontrado"
    
    if not usuario.get("ativo", True):
        return False, None, "Usu√°rio desativado"
    
    senha_hash = hashlib.sha256(senha.encode()).hexdigest()
    
    if usuario["senha"] == senha_hash:
        db_usuarios.update_one(
            {"_id": usuario["_id"]},
            {"$set": {"ultimo_login": datetime.now()}}
        )
        return True, usuario, "Login bem-sucedido"
    else:
        return False, None, "Senha incorreta"

def detectar_tipo_campanha(nome_campanha):
    """Detecta o tipo de campanha com base no nome"""
    try:
        if pd.isna(nome_campanha) or not isinstance(nome_campanha, str):
            return 'Outros'
            
        nome = nome_campanha.lower()
        
        if 'search' in nome or 'pesquisa' in nome:
            return 'Search'
        elif 'alcance' in nome or 'reach' in nome:
            return 'Alcance'
        elif 'conversao' in nome or 'convers√£o' in nome or 'conversion' in nome:
            return 'Convers√£o'
        elif 'display' in nome:
            return 'Display'
        elif 'video' in nome or 'v√≠deo' in nome:
            return 'Video'
        elif 'discovery' in nome:
            return 'Discovery'
        elif 'pmax' in nome or 'performance max' in nome:
            return 'Performance Max'
        else:
            return 'Outros'
    except Exception as e:
        print(f"Erro ao detectar tipo de campanha: {str(e)}")
        return 'Outros'

def carregar_dados(arquivo):
    """Carrega e prepara o arquivo CSV"""
    try:
        df = pd.read_csv(arquivo, skiprows=2, encoding='utf-8')
        df = df.dropna(how='all')
        
        mapeamento_colunas = {
            'Status da campanha': 'Status da campanha',
            'Campanha': 'Campanha',
            'Nome do or√É¬ßamento': 'Nome do or√ßamento',
            'C√É¬≥digo da moeda': 'C√≥digo da moeda',
            'Or√É¬ßamento': 'Or√ßamento',
            'Tipo de or√É¬ßamento': 'Tipo de or√ßamento',
            'Status': 'Status',
            'Motivos do status': 'Motivos do status',
            'Pontua√É¬ß√É¬£o de otimiza√É¬ß√É¬£o': 'Pontua√ß√£o de otimiza√ß√£o',
            'Tipo de campanha': 'Tipo de campanha',
            'CPV m√É¬©dio': 'CPV m√©dio',
            'Intera√É¬ß√É¬µes': 'Intera√ß√µes',
            'Taxa de intera√É¬ß√É¬£o': 'Taxa de intera√ß√£o',
            'Custo': 'Custo',
            'Impr.': 'Impress√µes',
            'Cliques': 'Cliques',
            'Convers√É¬µes': 'Convers√µes',
            'CTR': 'CTR',
            'CPM m√É¬©dio': 'CPM m√©dio',
            'CPC m√É¬©d.': 'CPC m√©dio',
            'Custo / conv.': 'Custo por convers√£o',
            'Custo m√É¬©dio': 'Custo m√©dio',
            'Engajamentos': 'Engajamentos',
            'IS parte sup. pesq.': 'IS parte superior pesquisa',
            'IS 1√Ç¬™ posi√É¬ß√É¬£o pesq.': 'IS 1¬™ posi√ß√£o pesquisa',
            'Visualiza√É¬ß√É¬µes': 'Visualiza√ß√µes',
            'Tipo de estrat√É¬©gia de lances': 'Tipo de estrat√©gia de lances',
            'Taxa de conv.': 'Taxa de convers√£o'
        }
        
        df = df.rename(columns=mapeamento_colunas)
        
        colunas_numericas = [
            'CPV m√©dio', 'Intera√ß√µes', 'Taxa de intera√ß√£o', 'Custo', 'Impress√µes',
            'Cliques', 'Convers√µes', 'CTR', 'CPM m√©dio', 'CPC m√©dio', 
            'Custo por convers√£o', 'Custo m√©dio', 'Engajamentos',
            'IS parte superior pesquisa', 'IS 1¬™ posi√ß√£o pesquisa', 'Visualiza√ß√µes',
            'Taxa de convers√£o'
        ]
        
        for col in colunas_numericas:
            if col in df.columns:
                df[col] = df[col].astype(str).str.replace(',', '.').str.replace('%', '').str.replace(' ', '')
                df[col] = pd.to_numeric(df[col], errors='coerce')
        
        return df
    except Exception as e:
        st.error(f"Erro ao carregar arquivo: {str(e)}")
        return None

def detectar_etapa_funil(nome_campanha):
    """Detecta a etapa do funil com base no nome da campanha"""
    try:
        if pd.isna(nome_campanha) or not isinstance(nome_campanha, str):
            return 'Outros'
            
        nome = nome_campanha.lower()
        
        topo_keywords = ['awareness', 'consciencia', 'alcance', 'reach', 'branding', 'marca']
        meio_keywords = ['consideracao', 'considera√ß√£o', 'consideration', 'engajamento', 'engagement', 'video', 'v√≠deo']
        fundo_keywords = ['conversao', 'convers√£o', 'conversion', 'venda', 'sales', 'lead', 'performance', 'pmax']
        
        if any(keyword in nome for keyword in topo_keywords):
            return 'Topo'
        elif any(keyword in nome for keyword in meio_keywords):
            return 'Meio'
        elif any(keyword in nome for keyword in fundo_keywords):
            return 'Fundo'
        else:
            return 'Outros'
    except Exception as e:
        print(f"Erro ao detectar etapa do funil: {str(e)}")
        return 'Outros'

METRICAS_POR_ETAPA = {
    'Topo': ['Impress√µes', 'Alcance', 'Custo', 'CPM m√©dio', 'Cliques', 'CTR'],
    'Meio': ['Impress√µes', 'Cliques', 'CTR', 'CPC m√©dio', 'CPM m√©dio', 'Custo'],
    'Fundo': ['Impress√µes', 'Cliques', 'Convers√µes', 'CTR', 'CPM m√©dio', 'CPC m√©dio', 'Custo por convers√£o']
}

def calcular_metricas(df):
    """Calcula estat√≠sticas b√°sicas para todas as colunas num√©ricas"""
    metricas = {}
    colunas_numericas = df.select_dtypes(include=[np.number]).columns.tolist()
    
    for col in colunas_numericas:
        metricas[col] = {
            'm√©dia': df[col].mean(),
            'mediana': df[col].median(),
            'desvio_padrao': df[col].std(),
            'min': df[col].min(),
            'max': df[col].max(),
            'q1': df[col].quantile(0.25),
            'q3': df[col].quantile(0.75)
        }
    
    return metricas

def criar_boxplot(df, coluna):
    """Cria um boxplot para uma coluna num√©rica"""
    try:
        plt.figure(figsize=(8, 4))
        sns.boxplot(x=df[coluna])
        plt.title(f'Distribui√ß√£o de {coluna}')
        plt.xlabel('Valor')
        st.pyplot(plt)
        plt.close()
    except Exception as e:
        st.error(f"Erro ao criar gr√°fico: {str(e)}")

def criar_grafico_comparativo(dados_atual, dados_anterior, metrica):
    """Cria um gr√°fico comparativo entre os dois per√≠odos"""
    try:
        plt.figure(figsize=(10, 6))
        
        valores = {
            'M√™s Atual': dados_atual[metrica].mean(),
            'M√™s Anterior': dados_anterior[metrica].mean()
        }
        
        variacao = ((valores['M√™s Atual'] - valores['M√™s Anterior']) / valores['M√™s Anterior']) * 100
        
        plt.bar(valores.keys(), valores.values(), color=['#4CAF50', '#2196F3'])
        
        for i, v in enumerate(valores.values()):
            plt.text(i, v, f"{v:,.2f}", ha='center', va='bottom')
        
        plt.title(f"Compara√ß√£o: {metrica}\nVaria√ß√£o: {variacao:.1f}%")
        plt.ylabel('Valor M√©dio')
        plt.grid(axis='y', linestyle='--', alpha=0.7)
        
        st.pyplot(plt)
        plt.close()
        
        return variacao
    except Exception as e:
        st.error(f"Erro ao criar gr√°fico comparativo: {str(e)}")
        return 0

def salvar_relatorio_mongodb(relatorio_data, usuario_id=None):
    """Salva o relat√≥rio no MongoDB"""
    try:
        if usuario_id:
            relatorio_data["usuario_id"] = usuario_id
        
        result = db_relatorios.insert_one(relatorio_data)
        return str(result.inserted_id)
    except Exception as e:
        st.error(f"Erro ao salvar no MongoDB: {str(e)}")
        return None

def obter_relatorios_usuario(usuario_id, limite=10):
    """Obt√©m os relat√≥rios de um usu√°rio espec√≠fico"""
    try:
        relatorios = list(db_relatorios.find(
            {"usuario_id": usuario_id},
            {"titulo": 1, "data_geracao": 1, "tipo": 1, "cliente.nome": 1}
        ).sort("data_geracao", -1).limit(limite))
        
        return relatorios
    except Exception as e:
        st.error(f"Erro ao buscar relat√≥rios: {str(e)}")
        return []

def obter_relatorio_completo(relatorio_id):
    """Obt√©m um relat√≥rio completo pelo ID"""
    try:
        relatorio = db_relatorios.find_one({"_id": ObjectId(relatorio_id)})
        return relatorio
    except Exception as e:
        st.error(f"Erro ao buscar relat√≥rio: {str(e)}")
        return None

def gerar_relatorio_llm(df, metricas, colunas_selecionadas, tipo_relatorio, cliente_info=None, df_anterior=None, usuario_id=None):
    """Gera um relat√≥rio anal√≠tico usando LLM e salva no MongoDB"""
    if not gemini_api_key:
        relatorio_completo = {
            "partes": [{"titulo": "Aviso", "conteudo": "üîí Relat√≥rio avan√ßado desabilitado. Configure a API key do Gemini para ativar esta funcionalidade."}],
            "texto_completo": "# Relat√≥rio de Campanhas\n\nüîí Relat√≥rio avan√ßado desabilitado. Configure a API key do Gemini para ativar esta funcionalidade."
        }
        return relatorio_completo
    
    try:
        if not isinstance(df, pd.DataFrame) or df.empty:
            relatorio_completo = {
                "partes": [{"titulo": "Erro", "conteudo": "Dados inv√°lidos para gerar relat√≥rio"}],
                "texto_completo": "# Relat√≥rio de Campanhas\n\n## Erro\n\nDados inv√°lidos para gerar relat√≥rio"
            }
            return relatorio_completo
        
        dados_para_llm = ""
        model_id = "gemini-2.0-flash"

        google_search_tool = Tool(
                                    google_search = GoogleSearch()
                                )
                                
                                
        pls = client.models.generate_content(
                                    model=model_id,
                                    contents="Fa√ßa uma pesquisa sobre not√≠cias sobre novidades em otimiza√ß√£o de campanhas",
                                    config=GenerateContentConfig(
                                        tools=[google_search_tool],
                                        response_modalities=["TEXT"],
                                    )
                                )
        
        dados_para_llm += "## Resumo Estat√≠stico - M√™s Atual:\n"
        for col in colunas_selecionadas:
            if col in metricas:
                stats = metricas[col]
                dados_para_llm += f"- {col}: M√©dia={stats['m√©dia']:.2f}, Mediana={stats['mediana']:.2f}, Min={stats['min']:.2f}, Max={stats['max']:.2f}\n"
        
        if df_anterior is not None and isinstance(df_anterior, pd.DataFrame) and not df_anterior.empty:
            metricas_anterior = calcular_metricas(df_anterior)
            dados_para_llm += "\n## An√°lise Comparativa Mensal:\n"
            
            for col in colunas_selecionadas:
                if col in metricas and col in metricas_anterior:
                    media_atual = metricas[col]['m√©dia']
                    media_anterior = metricas_anterior[col]['m√©dia']
                    variacao = ((media_atual - media_anterior) / media_anterior) * 100 if media_anterior != 0 else 0
                    
                    dados_para_llm += (f"- {col}: {media_atual:.2f} (M√™s Atual) vs {media_anterior:.2f} (M√™s Anterior) ‚Üí "
                                    f"{'‚Üë' if variacao > 0 else '‚Üì'} {abs(variacao):.1f}%\n")
        
        dados_para_llm += "\n## Melhores Campanhas - M√™s Atual:\n"
        for col in colunas_selecionadas[:10]:
            if col in df.columns and pd.api.types.is_numeric_dtype(df[col]):
                top3 = df.nlargest(3, col)[['Campanha', col]]
                dados_para_llm += f"- {col}:\n"
                for _, row in top3.iterrows():
                    dados_para_llm += f"  - {row['Campanha']}: {row[col]:.2f}\n"
        
        if df_anterior is not None and isinstance(df_anterior, pd.DataFrame) and not df_anterior.empty:
            dados_para_llm += "\n## Insights de Correla√ß√£o:\n"
            dados_para_llm += "  - Exemplo de an√°lise combinada que ser√° gerada pelo LLM:\n"
            dados_para_llm += "    * Se CTR aumentou mas Convers√µes ca√≠ram, pode indicar tr√°fego menos qualificado\n"
            dados_para_llm += "    * Se Custo por Convers√£o caiu e Convers√µes aumentaram, indica efici√™ncia melhorada\n"
            dados_para_llm += "    * Se Impress√µes ca√≠ram mas Engajamentos aumentaram, pode indicar p√∫blico mais segmentado\n"
        
        model = GenerativeModel('gemini-2.0-flash')
        
        with st.spinner("üß† Gerando relat√≥rio avan√ßado com IA..."):
            relatorio_completo = {
                "partes": [],
                "texto_completo": "# Relat√≥rio de Campanhas\n\n"
            }
            
            texto_completo_md = "# Relat√≥rio de Campanhas\n\n"
            
            prompts = []
            if tipo_relatorio == "t√©cnico":
                prompts = [
                    ("1. Introdu√ß√£o com vis√£o geral", f"""
                    - Quando mencionar m√©tricas, considere o enfoque m√©trica vs tipo de campanha: {rel_metrica}

                    D√™ apenas um panorama geral sobre os dados com os pontos:

                    - Vis√£o geral do desempenho das campanhas
                    - Contexto sobre os dados analisados
                    - Destaque inicial dos pontos mais relevantes
                    
                    Dados: {dados_para_llm}
                    
                    """),
                    ("2. An√°lise de cada m√©trica selecionada", f"""
                    - Quando mencionar m√©tricas, considere o enfoque m√©trica vs tipo de campanha: {rel_metrica}

                    Fa√ßa apenas uma an√°lise t√©cnica detalhada de cada m√©trica selecionada, com os pontos:
                    - Significado de cada m√©trica
                    - Performance em rela√ß√£o aos benchmarks do setor
                    - Rela√ß√£o com o tipo de campanha
                    
                    Dados: {dados_para_llm}
 
                    """),
                    ("3. Comparativo mensal detalhado", f"""
                    - Quando mencionar m√©tricas, considere o enfoque m√©trica vs tipo de campanha: {rel_metrica}
                    - Considere os objetivos das campanhas (que podem ser deduzidos pelos seus nomes) quando fizer sua an√°lise
                    Fa√ßa apenas um comparativo mensal detalhado com os pontos:
                    Analise comparativamente os dados com o m√™s anterior (quando dispon√≠vel):
                    - Varia√ß√µes percentuais significativas
                    - Tend√™ncias identificadas
                    
                    Dados: {dados_para_llm}

                    """),
                    ("4. Insights sobre correla√ß√µes", f"""
                    - Quando mencionar m√©tricas, considere o enfoque m√©trica vs tipo de campanha: {rel_metrica}
                    - Considere os objetivos das campanhas (que podem ser deduzidos pelos seus nomes) quando fizer sua an√°lise
                
                    Apenas Identifique correla√ß√µes importantes entre as m√©tricas com os pontos:
                    - Rela√ß√µes causa-efeito
                    - Padr√µes de desempenho
                    - Anomalias e outliers
                    - EX: Se m√©trica X subiu e m√©trica Y abaixou, isso significa que...
                    
                    Dados: {dados_para_llm}
        
                    """),
                    ("5. Recomenda√ß√µes t√©cnicas", f"""
                    - Quando mencionar m√©tricas, considere o enfoque m√©trica vs tipo de campanha: {rel_metrica}
                    - Considere os objetivos das campanhas (que podem ser deduzidos pelos seus nomes) quando fizer sua an√°lise
                    Apenas gere recomenda√ß√µes t√©cnicas espec√≠ficas baseadas na an√°lise com os pontos:
                    - Ajustes em campanhas
                    - Otimiza√ß√µes sugeridas
                    - Alertas sobre problemas identificados
                    
                    Dados: {dados_para_llm}
 
                    """),
                    ("6. Conclus√£o com resumo executivo", f"""
                    - Quando mencionar m√©tricas, considere o enfoque m√©trica vs tipo de campanha: {rel_metrica}
                    - Considere os objetivos das campanhas (que podem ser deduzidos pelos seus nomes) quando fizer sua an√°lise
                    Apenas Conclua com um resumo executivo t√©cnico com os pontos:
                    - Principais achados
                    - Recomenda√ß√µes priorit√°rias
                    - Pr√≥ximos passos sugeridos
                    
                    Dados: {dados_para_llm}

                    """)
                ]
            else:
                prompts = [
                    ("1. Vis√£o geral simplificada", f"""
                    - Quando mencionar m√©tricas, considere o enfoque m√©trica vs tipo de campanha: {rel_metrica}
                    - Considere os objetivos das campanhas (que podem ser deduzidos pelos seus nomes) quando fizer sua an√°lise
                    Voc√™ √© um estrategista de marketing. Apenas Gere uma vis√£o geral simplificada em portugu√™s com os pontos:
                    - Principais resultados
                    - Destaques e preocupa√ß√µes
                    - Contexto estrat√©gico
                    
                    Dados: {dados_para_llm}
        
                    """),
                    ("2. Principais destaques e preocupa√ß√µes", f"""
                    - Quando mencionar m√©tricas, considere o enfoque m√©trica vs tipo de campanha: {rel_metrica}
                    - Considere os objetivos das campanhas (que podem ser deduzidos pelos seus nomes) quando fizer sua an√°lise
                    Destaque os pontos mais relevantes e preocupa√ß√µes:

                    Apenas apresente os principais destaques e preocupa√ß√µes com os pontos:
                    - Compara√ß√µes mensais
                    - Varia√ß√µes significativas
                    - Impacto estrat√©gico dado o tipo de campanha
                    - Alinhamento com objetivos dado o tipo de campanha
                    
                    Dados: {dados_para_llm}

                    """),
                    ("3. An√°lise estrat√©gica do desempenho", f"""
                    - Quando mencionar m√©tricas, considere o enfoque m√©trica vs tipo de campanha: {rel_metrica}
                    - Considere os objetivos das campanhas (que podem ser deduzidos pelos seus nomes) quando fizer sua an√°lise
                    Apenas Analise o desempenho com foco em tend√™ncias com os pontos:
                    - Padr√µes de longo prazo
                    - Efic√°cia estrat√©gica
                    - Alinhamento com objetivos dado o tipo de campanha
                    
                    Dados: {dados_para_llm}

                    """),
                    ("4. Rela√ß√µes entre m√©tricas", f"""
                    - Quando mencionar m√©tricas, considere o enfoque m√©trica vs tipo de campanha: {rel_metrica}
                    - Considere os objetivos das campanhas (que podem ser deduzidos pelos seus nomes) quando fizer sua an√°lise

                    Apenas Explique como as m√©tricas se relacionam e impactam os resultados com os pontos:
                    - Conex√µes importantes
                    - Trade-offs identificados
                    - Sinergias encontradas
                    - Rela√ß√µes causa-efeito
                    - Tire insights sobre os trade offs entre as varia√ß√µes das m√©tricas. Relacione-as e tire conclus√µes sobre o que est√° acontecendo.
                    
                    Dados: {dados_para_llm}

                    """),
                    ("5. Recomenda√ß√µes de alto n√≠vel", f"""
                    - Quando mencionar m√©tricas, considere o enfoque m√©trica vs tipo de campanha: {rel_metrica}
                    - Considere os objetivos das campanhas (que podem ser deduzidos pelos seus nomes) quando fizer sua an√°lise
                    Apenas Gere recomenda√ß√µes estrat√©gicas com os pontos:
                    - Direcionamentos gerais
                    - Prioriza√ß√µes sugeridas
                    - Ajustes recomendados
                    
                    Dados: {dados_para_llm}

                    """),
                    ("6. Pr√≥ximos passos sugeridos", f"""
                    - Quando mencionar m√©tricas, considere o enfoque m√©trica vs tipo de campanha: {rel_metrica}
                    - Considere os objetivos das campanhas (que podem ser deduzidos pelos seus nomes) quando fizer sua an√°lise
                    Apenas Defina os pr√≥ximos passos estrat√©gicos com os pontos:
                    - A√ß√µes imediatas
                    - Monitoramentos necess√°rios
                    - Planejamento futuro
                    
                    Dados: {dados_para_llm}

                    """)
                ]
            
            for titulo, prompt in prompts:
                with st.spinner(f"Gerando {titulo.lower()}..."):
                    response = model.generate_content(prompt)
                    parte_conteudo = response.text
                    
                    texto_completo_md += f"## {titulo}\n\n{parte_conteudo}\n\n"
                    
                    parte_relatorio = {
                        "titulo": titulo,
                        "conteudo": parte_conteudo
                    }
                    relatorio_completo["partes"].append(parte_relatorio)
            
            relatorio_completo["texto_completo"] = texto_completo_md
            
            relatorio_data = {
                "tipo": tipo_relatorio,
                "partes": relatorio_completo["partes"],
                "texto_completo": relatorio_completo["texto_completo"],
                "metricas_analisadas": colunas_selecionadas,
                "data_geracao": datetime.now(),
                "cliente": cliente_info if cliente_info else "N√£o especificado",
                "status": "ativo",
                "comparativo_mensal": df_anterior is not None
            }
            
            relatorio_id = salvar_relatorio_mongodb(relatorio_data, usuario_id)
            if relatorio_id:
                st.success("‚úÖ Relat√≥rio salvo no banco de dados com sucesso!")
            
            return relatorio_completo
        
    except Exception as e:
        error_msg = f"Erro ao gerar relat√≥rio: {str(e)}"
        return {
            "partes": [{"titulo": "Erro", "conteudo": error_msg}],
            "texto_completo": f"# Relat√≥rio de Campanhas\n\n## Erro\n\n{error_msg}"
        }

# Sistema de Autentica√ß√£o ============================================

def mostrar_tela_login():
    """Mostra a tela de login/cadastro"""
    st.title("üîê Login / Cadastro")
    
    tab_login, tab_cadastro = st.tabs(["Login", "Cadastro"])
    
    with tab_login:
        with st.form("login_form"):
            email = st.text_input("Email")
            senha = st.text_input("Senha", type="password")
            submit = st.form_submit_button("Entrar")
            
            if submit:
                sucesso, usuario, mensagem = verificar_login(email, senha)
                if sucesso:
                    st.session_state["usuario"] = usuario
                    st.session_state["autenticado"] = True
                    st.success("Login bem-sucedido! Redirecionando...")
                    time.sleep(1)
                    st.rerun()
                else:
                    st.error(mensagem)
    
    with tab_cadastro:
        with st.form("cadastro_form"):
            nome = st.text_input("Nome Completo")
            email_cadastro = st.text_input("Email")
            senha_cadastro = st.text_input("Senha", type="password")
            confirmar_senha = st.text_input("Confirmar Senha", type="password")
            submit_cadastro = st.form_submit_button("Criar Conta")
            
            if submit_cadastro:
                if senha_cadastro != confirmar_senha:
                    st.error("As senhas n√£o coincidem")
                else:
                    sucesso, mensagem = criar_usuario(email_cadastro, senha_cadastro, nome)
                    if sucesso:
                        st.success(mensagem)
                    else:
                        st.error(mensagem)

def mostrar_app_principal():
    """Mostra o aplicativo principal ap√≥s o login"""
    usuario = st.session_state.get("usuario", {})
    
    with st.sidebar:
        st.markdown(f"### üë§ {usuario.get('nome', 'Usu√°rio')}")
        st.markdown(f"‚úâÔ∏è {usuario.get('email', '')}")
        
        if st.button("üö™ Sair"):
            del st.session_state["usuario"]
            del st.session_state["autenticado"]
            st.rerun()
    
    st.title("üìä Analytics Avan√ßado de Campanhas Digitais")
    
    if 'dados_atual' not in st.session_state:
        st.session_state.dados_atual = None
        st.session_state.dados_anterior = None
    
    tab_analise, tab_relatorios = st.tabs(["üìà An√°lise de Campanhas", "üóÇ Meus Relat√≥rios"])
    
    with tab_analise:
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìÖ M√™s Atual (Mais Recente)")
            arquivo_atual = st.file_uploader(
                "Carregue o relat√≥rio do m√™s atual",
                type=["csv"],
                key="uploader_atual"
            )
            if arquivo_atual:
                df_atual = carregar_dados(arquivo_atual)
                if df_atual is not None:
                    df_atual['Tipo Detectado'] = df_atual['Campanha'].apply(detectar_tipo_campanha)
                    df_atual['Etapa Funil'] = df_atual['Campanha'].apply(detectar_etapa_funil)
                    st.session_state.dados_atual = df_atual
                    st.success("‚úÖ Dados do m√™s atual carregados com sucesso!")
        
        with col2:
            st.subheader("üóìÔ∏è M√™s Anterior")
            arquivo_anterior = st.file_uploader(
                "Carregue o relat√≥rio do m√™s anterior",
                type=["csv"],
                key="uploader_anterior"
            )
            if arquivo_anterior:
                df_anterior = carregar_dados(arquivo_anterior)
                if df_anterior is not None:
                    df_anterior['Tipo Detectado'] = df_anterior['Campanha'].apply(detectar_tipo_campanha)
                    df_anterior['Etapa Funil'] = df_anterior['Campanha'].apply(detectar_etapa_funil)
                    st.session_state.dados_anterior = df_anterior
                    st.success("‚úÖ Dados do m√™s anterior carregados com sucesso!")
        
        with st.expander("‚ÑπÔ∏è Informa√ß√µes do Cliente (Opcional)"):
            cliente_nome = st.text_input("Nome do Cliente")
            cliente_id = st.text_input("ID do Cliente (se aplic√°vel)")
            cliente_tags = st.text_input("Tags (separadas por v√≠rgula)")
            
            cliente_info = {
                "nome": cliente_nome,
                "id": cliente_id,
                "tags": [tag.strip() for tag in cliente_tags.split(",")] if cliente_tags else []
            }
        
        if st.session_state.dados_atual is not None:
            df = st.session_state.dados_atual
            metricas = calcular_metricas(df)
            colunas_numericas = [col for col in metricas.keys()]
            
            with st.sidebar:
                st.header("üîß Configura√ß√µes de An√°lise")
                
                etapas_disponiveis = sorted(df['Etapa Funil'].unique()) if 'Etapa Funil' in df.columns else []
                etapas_funil = st.multiselect(
                    "Etapa do Funil",
                    options=etapas_disponiveis,
                    default=etapas_disponiveis
                )
                
                metricas_selecionadas = []
                for etapa in etapas_funil:
                    metricas_selecionadas.extend(METRICAS_POR_ETAPA.get(etapa, []))
                
                metricas_selecionadas = [m for m in list(set(metricas_selecionadas)) if m in df.columns]
                
                tipo_relatorio = st.radio(
                    "Tipo de relat√≥rio",
                    options=["t√©cnico", "gerencial"],
                    index=0
                )
                
                st.subheader("Filtros Adicionais")
                
                tipos_detectados = sorted(df['Tipo Detectado'].unique()) if 'Tipo Detectado' in df.columns else []
                tipos_selecionados = st.multiselect(
                    "Tipo de Campanha (detectado pelo nome)",
                    options=tipos_detectados,
                    default=tipos_detectados
                )
                
                if 'Tipo de campanha' in df.columns:
                    tipos_campanha = sorted([str(t) for t in df['Tipo de campanha'].unique() if pd.notna(t)])
                else:
                    tipos_campanha = []
                    st.warning("A coluna 'Tipo de campanha' n√£o foi encontrada no arquivo carregado")
                
                tipo_campanha = st.multiselect(
                    "Tipo de Campanha (do relat√≥rio)",
                    options=tipos_campanha,
                    default=tipos_campanha if tipos_campanha else None
                )
                
                status_disponiveis = sorted(df['Status da campanha'].unique()) if 'Status da campanha' in df.columns else []
                status_campanha = st.multiselect(
                    "Status da Campanha",
                    options=status_disponiveis,
                    default=['Ativada'] if 'Ativada' in status_disponiveis else status_disponiveis
                )
                
                mostrar_boxplots = st.checkbox("Mostrar boxplots das m√©tricas")
            
            df_filtrado = df[
                (df['Etapa Funil'].isin(etapas_funil)) &
                (df['Tipo Detectado'].isin(tipos_selecionados)) &
                (df['Tipo de campanha'].isin(tipo_campanha)) &
                (df['Status da campanha'].isin(status_campanha))
            ].copy()
            
            contagem_ativas = len(df_filtrado[df_filtrado['Status da campanha'] == 'Ativada'])
            contagem_pausadas = len(df_filtrado[df_filtrado['Status da campanha'] == 'Pausada'])
            
            tab1, tab2, tab3, tab4 = st.tabs(["üìã Vis√£o Geral", "üìä An√°lise por M√©trica", "üîÑ Comparativo Mensal", "üß† Relat√≥rio Avan√ßado"])
            
            with tab1:
                st.subheader("Vis√£o Geral das Campanhas - M√™s Atual")
                
                col1, col2, col3 = st.columns(3)
                col1.metric("Total de Campanhas", len(df_filtrado))
                col2.metric("Campanhas Ativas", contagem_ativas)
                col3.metric("Campanhas Pausadas", contagem_pausadas)
                
                st.subheader("Distribui√ß√£o por Etapa do Funil")
                fig, ax = plt.subplots(figsize=(8, 4))
                df_filtrado['Etapa Funil'].value_counts().plot(kind='bar', ax=ax, color=['#4CAF50', '#2196F3', '#FF9800'])
                plt.title('Campanhas por Etapa do Funil')
                plt.xlabel('Etapa do Funil')
                plt.ylabel('N√∫mero de Campanhas')
                st.pyplot(fig)
                
                st.dataframe(df_filtrado[['Campanha', 'Etapa Funil', 'Tipo Detectado', 'Status da campanha'] + metricas_selecionadas], 
                            use_container_width=True)
            
            with tab2:
                st.subheader("An√°lise Detalhada por M√©trica - M√™s Atual")
                
                metrica_selecionada = st.selectbox(
                    "Selecione uma m√©trica para an√°lise detalhada",
                    options=metricas_selecionadas
                )
                
                if metrica_selecionada:
                    if pd.api.types.is_numeric_dtype(df_filtrado[metrica_selecionada]):
                        stats = {
                            'm√©dia': df_filtrado[metrica_selecionada].mean(),
                            'mediana': df_filtrado[metrica_selecionada].median(),
                            'min': df_filtrado[metrica_selecionada].min(),
                            'max': df_filtrado[metrica_selecionada].max()
                        }
                        
                        col1, col2, col3, col4 = st.columns(4)
                        col1.metric("M√©dia", f"{stats['m√©dia']:,.2f}")
                        col2.metric("Mediana", f"{stats['mediana']:,.2f}")
                        col3.metric("M√≠nimo", f"{stats['min']:,.2f}")
                        col4.metric("M√°ximo", f"{stats['max']:,.2f}")
                        
                        if mostrar_boxplots:
                            st.subheader("Distribui√ß√£o dos Valores")
                            criar_boxplot(df_filtrado, metrica_selecionada)
                        
                        st.subheader(f"Top 5 Campanhas - {metrica_selecionada}")
                        top5 = df_filtrado.nlargest(5, metrica_selecionada)[['Campanha', 'Etapa Funil', metrica_selecionada]]
                        st.dataframe(top5.style.format({metrica_selecionada: "{:,.2f}"}))
                        
                        st.subheader(f"Bottom 5 Campanhas - {metrica_selecionada}")
                        bottom5 = df_filtrado.nsmallest(5, metrica_selecionada)[['Campanha', 'Etapa Funil', metrica_selecionada]]
                        st.dataframe(bottom5.style.format({metrica_selecionada: "{:,.2f}"}))
                    else:
                        st.warning(f"A m√©trica {metrica_selecionada} n√£o √© num√©rica e n√£o pode ser analisada desta forma")
            
            with tab3:
                st.subheader("Comparativo Mensal")
                
                if st.session_state.dados_anterior is not None:
                    df_anterior_filtrado = st.session_state.dados_anterior[
                        (st.session_state.dados_anterior['Etapa Funil'].isin(etapas_funil)) &
                        (st.session_state.dados_anterior['Tipo Detectado'].isin(tipos_selecionados)) &
                        (st.session_state.dados_anterior['Tipo de campanha'].isin(tipo_campanha)) &
                        (st.session_state.dados_anterior['Status da campanha'].isin(status_campanha))
                    ]
                    
                    metrica_comparacao = st.selectbox(
                        "Selecione uma m√©trica para compara√ß√£o",
                        options=metricas_selecionadas,
                        key="comparacao_metrica"
                    )
                    
                    if metrica_comparacao and pd.api.types.is_numeric_dtype(df_filtrado[metrica_comparacao]):
                        variacao = criar_grafico_comparativo(df_filtrado, df_anterior_filtrado, metrica_comparacao)
                        
                        st.subheader("An√°lise Detalhada da Compara√ß√£o")
                        
                        stats_atual = {
                            'M√©dia': df_filtrado[metrica_comparacao].mean(),
                            'Mediana': df_filtrado[metrica_comparacao].median(),
                            'M√≠nimo': df_filtrado[metrica_comparacao].min(),
                            'M√°ximo': df_filtrado[metrica_comparacao].max(),
                            'Desvio Padr√£o': df_filtrado[metrica_comparacao].std()
                        }
                        
                        stats_anterior = {
                            'M√©dia': df_anterior_filtrado[metrica_comparacao].mean(),
                            'Mediana': df_anterior_filtrado[metrica_comparacao].median(),
                            'M√≠nimo': df_anterior_filtrado[metrica_comparacao].min(),
                            'M√°ximo': df_anterior_filtrado[metrica_comparacao].max(),
                            'Desvio Padr√£o': df_anterior_filtrado[metrica_comparacao].std()
                        }
                        
                        df_comparativo = pd.DataFrame({
                            'M√™s Atual': stats_atual,
                            'M√™s Anterior': stats_anterior
                        }).T
                        
                        df_comparativo['Varia√ß√£o (%)'] = ((df_comparativo.loc['M√™s Atual'] - df_comparativo.loc['M√™s Anterior']) / 
                                                        df_comparativo.loc['M√™s Anterior']) * 100
                        
                        def color_variation(val):
                            color = 'red' if val < 0 else 'green' if val > 0 else 'gray'
                            return f'color: {color}'
                        
                        st.dataframe(
                            df_comparativo.style.format({
                                'M√©dia': '{:,.2f}',
                                'Mediana': '{:,.2f}',
                                'M√≠nimo': '{:,.2f}',
                                'M√°ximo': '{:,.2f}',
                                'Desvio Padr√£o': '{:,.2f}',
                                'Varia√ß√£o (%)': '{:,.1f}%'
                            }).applymap(color_variation, subset=['Varia√ß√£o (%)'])
                        )
                else:
                    st.info("‚ÑπÔ∏è Carregue os dados do m√™s anterior para habilitar a compara√ß√£o mensal")
            
            with tab4:
                st.subheader("Relat√≥rio Avan√ßado com IA")
                
                if st.button("Gerar Relat√≥rio com An√°lise Avan√ßada"):
                    relatorio = gerar_relatorio_llm(
                        df_filtrado, 
                        metricas, 
                        metricas_selecionadas,
                        tipo_relatorio, 
                        cliente_info,
                        st.session_state.dados_anterior if st.session_state.dados_anterior is not None else None,
                        usuario.get("_id") if usuario else None
                    )
                    
                    for parte in relatorio["partes"]:
                        with st.expander(f"**{parte['titulo']}**"):
                            st.markdown(parte["conteudo"])
                    
                    st.download_button(
                        label="‚¨áÔ∏è Baixar Relat√≥rio Completo (Markdown)",
                        data=relatorio["texto_completo"],
                        file_name=f"relatorio_campanhas_{datetime.now().strftime('%Y%m%d_%H%M')}.md",
                        mime="text/markdown",
                        key="download_relatorio_md"
                    )
        else:
            st.info("‚ÑπÔ∏è Por favor, carregue pelo menos o relat√≥rio do m√™s atual para come√ßar a an√°lise")
    
    with tab_relatorios:
        st.subheader("Meus Relat√≥rios Gerados")
        
        relatorios = obter_relatorios_usuario(usuario.get("_id")) if usuario else []
        
        if relatorios:
            st.write(f"üìö Voc√™ tem {len(relatorios)} relat√≥rios salvos:")
            
            for rel in relatorios:
                with st.expander(f"üìÑ {rel.get('cliente', {}).get('nome', 'Sem nome')} - {rel.get('tipo', 'Sem tipo')} - {rel['data_geracao'].strftime('%d/%m/%Y %H:%M')}"):
                    if st.button("üîç Ver Relat√≥rio Completo", key=f"ver_{rel['_id']}"):
                        relatorio_completo = obter_relatorio_completo(rel["_id"])
                        if relatorio_completo:
                            for parte in relatorio_completo.get("partes", []):
                                st.markdown(f"### {parte['titulo']}")
                                st.markdown(parte['conteudo'])
                    
                    texto_completo = "\n\n".join([f"## {p['titulo']}\n\n{p['conteudo']}" for p in rel.get("partes", [])])
                    st.download_button(
                        label="‚¨áÔ∏è Baixar Relat√≥rio",
                        data=texto_completo,
                        file_name=f"relatorio_{rel.get('tipo', 'geral')}_{rel['data_geracao'].strftime('%Y%m%d')}.md",
                        mime="text/markdown",
                        key=f"download_{rel['_id']}"
                    )
                    
                    if st.button("üóëÔ∏è Excluir", key=f"excluir_{rel['_id']}"):
                        db_relatorios.update_one(
                            {"_id": rel["_id"]},
                            {"$set": {"status": "excluido"}}
                        )
                        st.success("Relat√≥rio marcado como exclu√≠do")
                        st.rerun()
        else:
            st.info("Voc√™ ainda n√£o gerou nenhum relat√≥rio. Use a aba de an√°lise para criar seu primeiro relat√≥rio.")

# Ponto de entrada do aplicativo =====================================

def main():
    """Fun√ß√£o principal que controla o fluxo do aplicativo"""
    if not st.session_state.get("autenticado", False):
        mostrar_tela_login()
    else:
        mostrar_app_principal()

if __name__ == "__main__":
    main()
